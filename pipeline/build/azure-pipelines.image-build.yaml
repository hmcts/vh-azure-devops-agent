trigger:
  branches:
    include:
    - master
  paths:
    include:
    - packer/**
    exclude:
    - /**

pr: none

schedules:
- cron: "0 0 1 * *"
  displayName: Monthly Image Build
  branches:
    include:
    - master

resources:
  repositories:
    - repository: templates
      type: github
      name: hmcts/azure-devops-templates
      ref: refs/heads/master
      endpoint: hmcts

pool:
  vmImage: 'ubuntu-latest'

##############################
# Parameters. ################
parameters:
  - name: runTerraform
    displayName: Run Terraform
    type: boolean
    default: false

  - name: environment
    type: string
    default: Stg
    values:
      - Dev
      - Stg

##############################
# Variables. #################
variables:
  - name: env
    value: ${{ lower(parameters.environment) }}

  - ${{ if eq(parameters.environment, 'Dev') }}:
    - group: vh-azure-devops-agent-dev

  - ${{ if eq(parameters.environment, 'Stg') }}:
    - group: vh-azure-devops-agent

  - name: azureLocation
    value: 'uk south'

  - name: workDir
    value: $(Build.SourcesDirectory)/terraform

  - name: tfVersion
    value: 1.1.9

  - name: serviceConnection
    value: DTS-SHAREDSERVICES-${{ upper(variables.env) }}-Video Hearings

  - name: stateKey
    value: DevOpsAgent/AzureDevOpsAgent.tfstate
 
  - name: artifactName
    value: $(Build.BuildId)-AzureDevOps-Agent

############################################
# Terraform CI. ############################
stages:
- ${{ if eq(parameters.runTerraform, true) }}:
  - stage: CIBuild
    displayName: 'Terraform CI'
    jobs: 
    - template: /pipeline/templates/terraform-validate.yaml
      parameters:
        terraformPath: $(terraformDir)
        terraformVersion: $(tfVersion)

  ############################################
  # Terraform Plan. ##########################
  - stage: Plan
    displayName: 'Terraform Plan'
    dependsOn:
      - CIBuild
    jobs:
    - job: Terraform_Plan
      displayName: 'Terraform Plan'
      steps:
      - template: /pipeline/templates/get-peer-spn.yaml
        parameters:
          peerServiceConnection: 'GlobalNetworkPeering'

      - template: /pipeline/templates/terraform-prep.yaml
        parameters:
          terraformVersion: $(tfVersion)
          serviceConnection: $(serviceConnection)
          resourceGroup: $(stateResourceGroup)
          location: $(azureLocation)
          storageAccount: $(stateStorageAccount)
          containerName: $(stateContainerName)
          stateKey: $(stateKey)
          workingDirectory: $(terraformDir)

      - template: /pipeline/templates/terraform-plan.yaml
        parameters:
          subscription: $(serviceConnection)
          artifactName: $(artifactName)
          workingDirectory: $(terraformDir)
          customCommandOptions: '-var-file=$(terraformDir)/vars/adoagent-${{ variables.env }}.tfvars -var env=${{ variables.env }} -out=$(Build.BuildId)-AzureDevOps-Agent.tfplan -var peer_client_id=$(Peering.PEER_CLIENT_ID) -var peer_client_secret=$(Peering.PEER_CLIENT_SECRET) -var peer_tenant_id=$(Peering.PEER_TENANT_ID) -target="azurerm_shared_image.ubuntu2204_devops" -target="azurerm_resource_group.vh_infra_core_ado" -target="azurerm_shared_image_gallery.vhinfracoreado"'
    
  ############################################
  # Manual Validation. #######################
  - stage: Wait
    dependsOn:
      - Plan
    jobs:
    - job: WaitForApproval
      displayName: "Approval Gate"
      pool: server
      steps:
        - template: /pipeline/templates/wait.yaml

  # ############################################
  # # Terraform Apply. #########################
  - stage: DeployAzureAgent
    displayName: Terraform Apply
    dependsOn: Wait
    jobs:
    - job: Deploy_Terraform
      displayName: Deploy DevOps Agent
      steps:
        - checkout: none
        
        - task: DownloadPipelineArtifact@2
          displayName: Download Terraform Artifacts
          inputs:
            artifact: '$(artifactName)'
            targetPath: '$(Pipeline.Workspace)/$(artifactName)'

        - task: ExtractFiles@1
          displayName: 'Extract Terraform Artifacts'
          inputs:
            archiveFilePatterns: '$(Pipeline.Workspace)/$(artifactName)/$(artifactName).zip'
            destinationFolder: '$(Pipeline.Workspace)/$(artifactName)'
            cleanDestinationFolder: false
            overwriteExistingFiles: true

        - ${{ if eq(parameters.env, 'Stg') }}:
          - template:  templates\Azure\Common\unlock-resource-group.yml@templates
            parameters:
              subscriptionName:  $(serviceConnection)
              resourceGroupName: "vh-infra-core-ado"
              lockName: "stg-lock"

        - template: /pipeline/templates/terraform-prep.yaml
          parameters:
            terraformVersion: $(tfVersion)
            serviceConnection: $(serviceConnection)
            resourceGroup: $(stateResourceGroup)
            location: $(azureLocation)
            storageAccount: $(stateStorageAccount)
            containerName: $(stateContainerName)
            stateKey: $(stateKey)
            workingDirectory: '$(Pipeline.Workspace)/$(artifactName)/terraform'

        - template: /pipeline/templates/terraform-apply.yaml
          parameters:
            subscription: $(serviceConnection)
            planLocation: $(Pipeline.Workspace)/$(artifactName)/terraform/$(artifactName).tfplan
            workingDirectory: '$(Pipeline.Workspace)/$(artifactName)/terraform'

- stage: PackerBuild
  displayName: Packer Build
  jobs:
  - job: PackerBuild
    displayName: Packer Build
    steps:
      - template: /pipeline/templates/packer-build.yml
        parameters:
          azureSubscription: $(serviceConnection)
          packerConfigFile: packer/linux/ubuntu2204.pkr.hcl
          packerVarFile: packer/linux/variables/$(env).pkrvars.hcl
          environment: $(env)