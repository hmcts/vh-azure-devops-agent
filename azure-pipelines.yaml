trigger:
  - master
pr:
  - none

resources:
  repositories:
    - repository: templates
      type: github
      name: hmcts/azure-devops-templates
      ref: refs/heads/master
      endpoint: hmcts

parameters:
  - name: Run_Stage
    displayName: Stage to Run
    type: string
    default: 'ValidateTerraform'
    values:
    - ValidateTerraform
    - DeployAzureAgent
    - DestroyAzureAgent

  - name: environment
    displayName: Environment (sandbox default)
    type: string
    default: sandbox # USE upper and lower?
    values:
      - sandbox
 #     - upper
 #     - lower

variables:
  - group: vh-azure-devops-agent
  - name: TF_VAR_RG_NAME
    value: "vh-devops-agent-rg-${{ parameters.environment }}"
  - name: TF_VAR_KV_NAME
    value: "vhdoagentkv${{ parameters.environment }}"
  - name: TF_VAR_VM_NAME
    value: "vh-devops-agent-vm-${{ parameters.environment }}"
  - name: TF_VAR_NSG_NAME
    value: "vh-devops-vm-nsg-${{ parameters.environment }}"
  - name: TF_VAR_VNET_NAME
    value: "vh-devops-vnet-${{ parameters.environment }}"
  - name: workDir
    value: $(System.DefaultWorkingDirectory)/$(tfDirectory)
 

stages:

  - stage: CIBuild
    displayName: 'Validate Infra'
    jobs: 
      - template: ado-pipeline/jobs/terraform-validate.yaml
        parameters:
          terraformPath: $(Build.SourcesDirectory)/$(tfDirectory)
          terraformVersion: $(tfVersion)

  - ${{ if or(eq(parameters.Run_Stage, 'ValidateTerraform'), eq(parameters.Run_Stage, 'DeployAzureAgent')) }}:
    - stage: Plan
      displayName: 'Create a TF plan'
      jobs:
        - job: TerraformPlan
          displayName: Create an infrastructure plan to deploy DevOps Agent to ${{ parameters.environment }}
          pool:
            vmImage: 'ubuntu-latest'
          
          steps:

          - template: ado-pipeline/jobs/replace-token.yaml
            parameters:
              myConnection: $(patToken)
              workingDirectory: $(workDir)
              environment: ${{ parameters.environment }}

          - template: ado-pipeline/jobs/terraform-prep.yaml
            parameters:
              terraformVersion: $(tfVersion)
              subscription: $(subscription)
              environment: ${{ parameters.environment }}
              resourceGroup: $(resourceGroup)
              location: $(location)
              storageAccount: $(storageAccount)
              containerName: $(containerName)
              stateKey: $(stateKey)-${{ parameters.environment }}.tfstate
              workingDirectory: $(workDir)

          - template: pipeline-steps/terraform-plan.yaml
            parameters:
              subscription: $(subscription)
              environment: ${{ parameters.environment }}
              tfVariables: $(System.DefaultWorkingDirectory)/$(tfDirectory)/$(tfVariables)
              workingDirectory: $(workDir)
    
    - stage: Wait
      jobs:
        - job: Wait
          displayName: "Wait for approval"
          pool: server
          steps:
            - template: ado-pipeline/steps/wait.yaml
              parameters:
                environment: ${{ parameters.environment }}
  
  - ${{ if eq(parameters.Run_Stage, 'DeployAzureAgent') }}:
    - stage: DeployAzureAgent
      displayName: Deploy Azure DevOps Agent in ${{ parameters.environment }}
      dependsOn: Wait
      jobs:
        - job: Deploy_Terraform
          displayName: Deploy DevOps Agent to ${{ parameters.environment }}
          pool:
            vmImage: 'ubuntu-latest'
          
          steps:

            - template: ado-pipeline/jobs/replace-token.yaml
              parameters:
                myConnection: $(patToken)
                workingDirectory: $(workDir)
                environment: ${{ parameters.environment }}

            - download: current
              artifact: '${{ parameters.environment }}-agent.tfplan'
              displayName: 'Download ${{ parameters.environment }}.tfplan'

                
            - template: ado-pipeline/jobs/terraform-prep.yaml
              parameters:
                terraformVersion: $(tfVersion)
                subscription: $(subscription)
                environment: ${{ parameters.environment }}
                resourceGroup: $(resourceGroup)
                location: $(location)
                storageAccount: $(storageAccount)
                containerName: $(containerName)
                stateKey: $(stateKey)-${{ parameters.environment }}.tfstate
                workingDirectory: $(workDir)

            - template: ado-pipeline/jobs/terraform-apply.yaml
              parameters:
                subscription: $(subscription)
                environment: ${{ parameters.environment }}
                planLocation: '$(System.DefaultWorkingDirectory)/$(tfDirectory)/${{ parameters.environment }}-agent.tfplan'
                workingDirectory: $(workDir)

# If you need to destroy this infra, delete and purge the secret from the keyvault before you run the destroy stage
  - ${{ if eq(parameters.Run_Stage, 'DestroyAzureAgent') }}:
    - stage: DestroyAzureAgent
      displayName: Destroy Azure Devops Agent for ${{ parameters.environment }}

      jobs:
      - job: Destroy_Terraform
        displayName: Destroy Azure DevOps Agent in ${{ parameters.environment }}
        pool:
          vmImage: 'ubuntu-latest'

        steps:
          
          - template: pipeline-steps/terraform-prep.yaml
            parameters:
              terraformVersion: $(tfVersion)
              subscription: $(subscription)
              environment: ${{ parameters.environment }}
              resourceGroup: $(resourceGroup)
              location: $(location)
              storageAccount: $(storageAccount)
              containerName: $(containerName)
              stateKey: $(stateKey)-${{ parameters.environment }}.tfstate
              workingDirectory: $(workDir)

          - task: TerraformCLI@0
            displayName: Terraform plan destroy
            inputs:
              command: plan
              workingDirectory: $(System.DefaultWorkingDirectory)/$(tfDirectory)
              environmentServiceName: $(subscription)
              commandOptions: '-destroy -var-file=$(tfVariables) -out=$(System.DefaultWorkingDirectory)/$(tfDirectory)/${{ parameters.environment }}-destroy.tfplan'

          - template: pipeline-steps/terraform-apply.yaml
            parameters:
              subscription: $(subscription)
              environment: ${{ parameters.environment }}
              planLocation: $(System.DefaultWorkingDirectory)/$(tfDirectory)/${{ parameters.environment }}-destroy.tfplan
              workingDirectory: $(workDir) 
