trigger:
  - master

pr: none

resources:
  repositories:
    - repository: templates
      type: github
      name: hmcts/azure-devops-templates
      ref: refs/heads/master
      endpoint: hmcts

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: vh-azure-devops-agent

  - name: azureLocation
    value: 'uk south'

  - name: workDir
    value: $(Build.SourcesDirectory)/terraform

  - name: tfVersion
    value: 1.1.9

  - name: serviceConnection
    value: DTS-SHAREDSERVICES-STG-Video Hearings

  - name: stateKey
    value: DevOpsAgent/AzureDevOpsAgent.tfstate
  
  - name: devOpsURL
    value: 'https://dev.azure.com/hmcts'
 
  - name: artifactName
    value: $(Build.BuildId)-AzureDevOps-Agent

############################################
# Terraform CI. ############################
stages:
- stage: CIBuild
  displayName: 'Terraform CI'
  jobs: 
    - template: ado-pipeline/jobs/terraform-validate.yaml
      parameters:
        terraformPath: $(workDir)
        terraformVersion: $(tfVersion)

############################################
# Terraform Plan. ##########################
- stage: Plan
  displayName: 'Terraform Plan'
  dependsOn:
    - CIBuild
  jobs:
  - job: Terraform_Plan
    displayName: 'Terraform Plan'
    steps:
    - template: ado-pipeline/jobs/get-peer-spn.yaml
      parameters:
        peerServiceConnection: GlobalNetworkPeering
        
    - template: ado-pipeline/jobs/prepare-agents-script.yaml
      parameters:
        workingDirectory: $(workDir)
        patToken: $(patToken)
        numberOfAgents: 2
        devOpsURL: $(devOpsURL)

    - template: ado-pipeline/jobs/terraform-prep.yaml
      parameters:
        terraformVersion: $(tfVersion)
        serviceConnection: $(serviceConnection)
        resourceGroup: $(stateResourceGroup)
        location: $(azureLocation)
        storageAccount: $(stateStorageAccount)
        containerName: $(stateContainerName)
        stateKey: $(stateKey)
        workingDirectory: $(workDir)

    - template: ado-pipeline/jobs/terraform-plan.yaml
      parameters:
        subscription: $(serviceConnection)
        workingDirectory: $(workDir)
        customCommandOptions: '-var-file=$(workDir)/adoagent.tfvars -out=$(Build.BuildId)-AzureDevOps-Agent.tfplan -var peer_client_id=$(Peering.PEER_CLIENT_ID) -var peer_client_secret=$(Peering.PEER_CLIENT_SECRET -var peer_tenant_id=$(Peering.PEER_TENANT_ID)'

############################################
# Manual Validation. #######################
- stage: Wait
  dependsOn:
    - Plan
  jobs:
    - job: WaitForApproval
      displayName: "Wait for approval"
      pool: server
      steps:
        - template: ado-pipeline/steps/wait.yaml

############################################
# Terraform Apply. #########################
- stage: DeployAzureAgent
  displayName: Terraform Apply
  dependsOn: Wait
  jobs:
  - job: Deploy_Terraform
    displayName: Deploy DevOps Agent
    steps:
      - checkout: none
      
      - task: DownloadPipelineArtifact@2
        displayName: Download Terraform Artifacts
        inputs:
          artifact: '$(artifactName)'
          targetPath: '$(Pipeline.Workspace)/$(artifactName)'

      - task: ExtractFiles@1
        displayName: 'Extract Terraform Artifacts'
        inputs:
          archiveFilePatterns: '$(Pipeline.Workspace)/$(artifactName)/$(artifactName).zip'
          destinationFolder: '$(Pipeline.Workspace)/$(artifactName)'
          cleanDestinationFolder: false
          overwriteExistingFiles: true
     
      - template: ado-pipeline/jobs/terraform-prep.yaml
        parameters:
          terraformVersion: $(tfVersion)
          serviceConnection: $(serviceConnection)
          resourceGroup: $(stateResourceGroup)
          location: $(azureLocation)
          storageAccount: $(stateStorageAccount)
          containerName: $(stateContainerName)
          stateKey: $(stateKey)
          workingDirectory: '$(Pipeline.Workspace)/$(artifactName)/terraform'

      - template: ado-pipeline/jobs/terraform-apply.yaml
        parameters:
          subscription: $(serviceConnection)
          planLocation: $(Pipeline.Workspace)/$(artifactName)/terraform/$(artifactName).tfplan
          workingDirectory: '$(Pipeline.Workspace)/$(artifactName)/terraform'