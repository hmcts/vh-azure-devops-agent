trigger:
  - none

pr: none

resources:
  repositories:
    - repository: templates
      type: github
      name: hmcts/azure-devops-templates
      ref: refs/heads/master
      endpoint: hmcts

pool:
  vmImage: 'ubuntu-latest'

variables:
  - group: vh-azure-devops-agent-new

  - name: devOpsURL
    value: 'https://dev.azure.com/hmcts'

  - name: tfVersion
    value: latest

  - name: workDir
    value: $(Build.SourcesDirectory)/terraform

  - name: tfVersion
    value: 1.1.9

  - name: serviceConnection
    value: DTS-SHAREDSERVICES-STG-Video Hearings
 

stages:
- stage: CIBuild
  displayName: 'Terraform CI'
  jobs: 
    - template: ado-pipeline/jobs/terraform-validate.yaml
      parameters:
        terraformPath: $(workDir)
        terraformVersion: $(tfVersion)

- stage: Plan
  displayName: 'Terraform Plan'
  dependsOn:
    - CIBuild
  jobs:
  - job: Terraform_Plan
    displayName: 'Terraform Plan'
    steps:
    - template: ado-pipeline/jobs/set-number-agents.yaml
      parameters:
        numberOfAgents: 2
        workingDirectory: $(workDir)

    - template: ado-pipeline/jobs/replace-token.yaml
      parameters:
        myConnection: $(patToken)
        workingDirectory: $(workDir)
        devOpsUrl: $(devOpsURL)

    - template: ado-pipeline/jobs/terraform-prep.yaml
      parameters:
        terraformVersion: $(tfVersion)
        serviceConnection: $(serviceConnection)
        resourceGroup: $(stateResourceGroup)
        location: 'uk south'
        storageAccount: $(stateStorageAccount)
        containerName: tfstate
        stateKey: DevOpsAgent/AzureDevOpsAgent.tfstate
        workingDirectory: $(workDir)

    - template: ado-pipeline/jobs/terraform-plan.yaml
      parameters:
        subscription: $(serviceConnection)
        tfVariables: $(workDir)/adoagent.tfvars
        workingDirectory: $(workDir)

# - ${{ if contains(variables['Build.SourceBranchName'], 'master') }}:
#   - stage: Wait
#     dependsOn:
#       - Plan
#     jobs:
#       - job: WaitForApproval
#         displayName: "Wait for approval"
#         pool: server
#         steps:
#           - template: ado-pipeline/steps/wait.yaml

- stage: DeployAzureAgent
  displayName: Terraform Apply
  # ${{ if contains(variables['Build.SourceBranchName'], 'master') }}:
  #   dependsOn: Wait
  jobs:
  - job: Deploy_Terraform
    displayName: Deploy DevOps Agent
    steps:
      # - template: ado-pipeline/jobs/replace-token.yaml
      #   parameters:
      #     myConnection: $(patToken)
      #     workingDirectory: $(workDir)
      #     devOpsUrl: $(devOpsUrl)
      
      - template: ado-pipeline/jobs/terraform-prep.yaml
        parameters:
          terraformVersion: $(tfVersion)
          serviceConnection: $(serviceConnection)
          resourceGroup: $(stateResourceGroup)
          location: 'uk south'
          storageAccount: $(stateStorageAccount)
          containerName: tfstate
          stateKey: DevOpsAgent/AzureDevOpsAgent.tfstate
          workingDirectory: $(Pipeline.Workspace)/$(Build.BuildId)-AzureDevOpsAgent

      - template: ado-pipeline/jobs/terraform-apply.yaml
        parameters:
          subscription: $(serviceConnection)
          planLocation: $(Pipeline.Workspace)/$(Build.BuildId)-AzureDevOpsAgent/adoagent.tfvars
          workingDirectory: $(Pipeline.Workspace)/$(Build.BuildId)-AzureDevOpsAgent