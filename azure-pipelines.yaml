trigger:
  - master
pr:
  - none

resources:
  repositories:
    - repository: templates
      type: github
      name: hmcts/azure-devops-templates
      ref: refs/heads/master
      endpoint: hmcts

parameters:
  - name: environment
    displayName: Environment (sbox default)
    type: string
    default: sandbox # USE upper and lower
    values:
      - sandbox
      - upper
      - lower

variables:
  - group: vh-azure-devops-agent

stages:

  - stage: TF Prep
    displayName: 'Terraform install and validate'
    jobs: 
      - template: pipeline-steps/terraform-prep.yaml
        parameters:
          subscription: $(subscription)
          environment: ${{ parameters.environment }}
          resourceGroup: $(resourceGroup)
          location: $(location)
          storageAccount: $(storageAccount)
          containerName: $(containerName)
          stateKey: $(stateKey)-${{ parameters.environment }}.tfstate
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform
  
  - stage: Plan
    displayName: TF Plan
    jobs:
      - template: pipeline-steps/terraform-plan.yaml
        parameters:
          subscription: $(subscription)
          environment: ${{ parameters.environment }}
          location: $(location)
          resourceGroup: $(resourceGroup)
          storageAccount: $(storageAccount)
          containerName: $(containerName)
          stateKey: $(stateKey)-${{ parameters.environment }}.tfstate
          outputName: ${{ parameters.environment }}
          workingDirectory: $(System.DefaultWorkingDirectory)/terraform
            
  - stage: Apply
    displayName: TF Apply
    jobs:
      - template: pipeline-steps/terraform-apply.yaml
        parameters:
          subscription: $(subscription)
          location: $(location)
          environment: ${{ parameters.environment }}
          resourceGroup: $(resourceGroup)
          storageAccount: $(storageAccount)
          containerName: $(containerName)
          stateKey: $(stateKey)-${{ parameters.environment }}.tfstate
          outputName: ${{ parameters.environment }}
          workingDirectory: $(System.DefaultWorkingDirectory)/infrastructure